=begin
#PluralKit

#This is the API for [PluralKit](https://pluralkit.me/)! :)  The API itself is stable, but this document (the OpenAPI description) is still subject to change, and may be updated, corrected or restructured in the future (as long as it's still coherent with the real API).  # Authentication Authentication is handled using a \"system token\". At the moment, the only way to obtain a system token is to use the `pk;token` command through the Discord bot.  This will generate an opaque string you must pass as the `Authorization` header to API requests. Many API endpoints are available anonymously, but most of them will hide information from  unauthenticated requests to align with the relevant privacy settings.  # Errors Errors are just returned as HTTP response codes. Most error responses include a human-readable error message as the body, but this should not be relied on. Just read the response codes :)  # OpenAPI version history - **1.1**: Granular member privacy - **1.0**: (initial definition version) 

The version of the OpenAPI document: 1.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0-SNAPSHOT

=end

require 'cgi'

module PluralKitAPI
  class MembersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a new member in your system.
    # @param member [Member] 
    # @param [Hash] opts the optional parameters
    # @return [Member]
    def create_member(member, opts = {})
      data, _status_code, _headers = create_member_with_http_info(member, opts)
      data
    end

    # Creates a new member in your system.
    # @param member [Member] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Member, Integer, Hash)>] Member data, response status code and response headers
    def create_member_with_http_info(member, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.create_member ...'
      end
      # verify the required parameter 'member' is set
      if @api_client.config.client_side_validation && member.nil?
        fail ArgumentError, "Missing the required parameter 'member' when calling MembersApi.create_member"
      end
      # resource path
      local_var_path = '/m'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(member)

      # return_type
      return_type = opts[:debug_return_type] || 'Member'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.create_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#create_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a member.
    # @param id [String] The ID of the member in question.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_member(id, opts = {})
      delete_member_with_http_info(id, opts)
      nil
    end

    # Deletes a member.
    # @param id [String] The ID of the member in question.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_member_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.delete_member ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.delete_member"
      end
      if @api_client.config.client_side_validation && id.to_s.length > 5
        fail ArgumentError, 'invalid value for "id" when calling MembersApi.delete_member, the character length must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && id.to_s.length < 5
        fail ArgumentError, 'invalid value for "id" when calling MembersApi.delete_member, the character length must be great than or equal to 5.'
      end

      pattern = Regexp.new(/^[a-z]{5}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling MembersApi.delete_member, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/m/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.delete_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#delete_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a member by their ID.
    # @param id [String] The ID of the member in question.
    # @param [Hash] opts the optional parameters
    # @return [Member]
    def get_member(id, opts = {})
      data, _status_code, _headers = get_member_with_http_info(id, opts)
      data
    end

    # Gets a member by their ID.
    # @param id [String] The ID of the member in question.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Member, Integer, Hash)>] Member data, response status code and response headers
    def get_member_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.get_member ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.get_member"
      end
      if @api_client.config.client_side_validation && id.to_s.length > 5
        fail ArgumentError, 'invalid value for "id" when calling MembersApi.get_member, the character length must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && id.to_s.length < 5
        fail ArgumentError, 'invalid value for "id" when calling MembersApi.get_member, the character length must be great than or equal to 5.'
      end

      pattern = Regexp.new(/^[a-z]{5}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling MembersApi.get_member, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/m/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Member'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.get_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#get_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a system's members.
    # If the API token does not belong to this system, this list may exclude any private members in the system. 
    # @param id [String] The ID of the system in question.
    # @param [Hash] opts the optional parameters
    # @return [Array<System>]
    def get_system_members(id, opts = {})
      data, _status_code, _headers = get_system_members_with_http_info(id, opts)
      data
    end

    # Gets a system&#39;s members.
    # If the API token does not belong to this system, this list may exclude any private members in the system. 
    # @param id [String] The ID of the system in question.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<System>, Integer, Hash)>] Array<System> data, response status code and response headers
    def get_system_members_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.get_system_members ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.get_system_members"
      end
      if @api_client.config.client_side_validation && id.to_s.length > 5
        fail ArgumentError, 'invalid value for "id" when calling MembersApi.get_system_members, the character length must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && id.to_s.length < 5
        fail ArgumentError, 'invalid value for "id" when calling MembersApi.get_system_members, the character length must be great than or equal to 5.'
      end

      pattern = Regexp.new(/^[a-z]{5}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling MembersApi.get_system_members, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/s/{id}/members'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<System>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"MembersApi.get_system_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#get_system_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a member.
    # @param id [String] The ID of the member in question.
    # @param member [Member] 
    # @param [Hash] opts the optional parameters
    # @return [Member]
    def update_member(id, member, opts = {})
      data, _status_code, _headers = update_member_with_http_info(id, member, opts)
      data
    end

    # Updates a member.
    # @param id [String] The ID of the member in question.
    # @param member [Member] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Member, Integer, Hash)>] Member data, response status code and response headers
    def update_member_with_http_info(id, member, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.update_member ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MembersApi.update_member"
      end
      if @api_client.config.client_side_validation && id.to_s.length > 5
        fail ArgumentError, 'invalid value for "id" when calling MembersApi.update_member, the character length must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && id.to_s.length < 5
        fail ArgumentError, 'invalid value for "id" when calling MembersApi.update_member, the character length must be great than or equal to 5.'
      end

      pattern = Regexp.new(/^[a-z]{5}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling MembersApi.update_member, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'member' is set
      if @api_client.config.client_side_validation && member.nil?
        fail ArgumentError, "Missing the required parameter 'member' when calling MembersApi.update_member"
      end
      # resource path
      local_var_path = '/m/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(member)

      # return_type
      return_type = opts[:debug_return_type] || 'Member'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.update_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#update_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
