=begin
#PluralKit

#This is the API for [PluralKit](https://pluralkit.me/)! :)  The API itself is stable, but this document (the OpenAPI description) is still subject to change, and may be updated, corrected or restructured in the future (as long as it's still coherent with the real API).  # Authentication Authentication is handled using a \"system token\". At the moment, the only way to obtain a system token is to use the `pk;token` command through the Discord bot.  This will generate an opaque string you must pass as the `Authorization` header to API requests. Many API endpoints are available anonymously, but most of them will hide information from  unauthenticated requests to align with the relevant privacy settings.  # Errors Errors are just returned as HTTP response codes. Most error responses include a human-readable error message as the body, but this should not be relied on. Just read the response codes :)  # OpenAPI version history - **1.1**: Granular member privacy - **1.0**: (initial definition version) 

The version of the OpenAPI document: 1.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for PluralKitAPI::SystemsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'SystemsApi' do
  before do
    # run before each test
    @api_instance = PluralKitAPI::SystemsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SystemsApi' do
    it 'should create an instance of SystemsApi' do
      expect(@api_instance).to be_instance_of(PluralKitAPI::SystemsApi)
    end
  end

  # unit tests for a_id_get
  # Gets a system by (one of) its associated Discord accounts.
  # Note that it&#39;s currently not possible to get a system&#39;s registered accounts given a system ID through the API. Consider this endpoint \&quot;one-way\&quot;. 
  # @param id A Discord user ID.
  # @param [Hash] opts the optional parameters
  # @return [System]
  describe 'a_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_own_system
  # Returns your own system.
  # Requires authentication, and will returns the system the token belongs to.
  # @param [Hash] opts the optional parameters
  # @return [System]
  describe 'get_own_system test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_system
  # Gets a system by its ID.
  # Partial information may be returned if not authenticated with this system&#39;s token.
  # @param id The ID of the system in question.
  # @param [Hash] opts the optional parameters
  # @return [System]
  describe 'get_system test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_system_fronters
  # Gets a system&#39;s current fronters.
  # @param id The ID of the system in question.
  # @param [Hash] opts the optional parameters
  # @return [FullSwitch]
  describe 'get_system_fronters test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_system_members
  # Gets a system&#39;s members.
  # If the API token does not belong to this system, this list may exclude any private members in the system. 
  # @param id The ID of the system in question.
  # @param [Hash] opts the optional parameters
  # @return [Array<System>]
  describe 'get_system_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_system_switches
  # Gets a system&#39;s switch history.
  # Will return the system&#39;s switch history, up to 100 entries at a time, in reverse-chronological (latest first) order.  For pagination, see the &#x60;before&#x60; query parameter. 
  # @param id The ID of the system in question.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :before If provided, will only return switches that happened *before* (and not including) this timestamp.  This can be used for pagination by calling the endpoint again with the timestamp of the last switch of the previous response. 
  # @return [Array<Switch>]
  describe 'get_system_switches test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_system
  # Updates an existing system.
  # Requires authentication, and will update the system the token belongs to.
  # @param system 
  # @param [Hash] opts the optional parameters
  # @return [System]
  describe 'update_system test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
